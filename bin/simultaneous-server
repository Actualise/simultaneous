#!/usr/bin/env ruby

faf_path = File.expand_path('../../lib', __FILE__)
$:.unshift(faf_path) if File.directory?(faf_path) && !$:.include?(faf_path)

require 'optparse'
require 'eventmachine'
require 'etc'
require 'fileutils'

require 'simultaneous'


options = {}
options[:gid] = Process.egid

connection = Simultaneous::DEFAULT_CONNECTION

socket = port = host = nil

OptionParser.new do |opts|
  opts.on("-d", "--debug", "Turn on debugging") {  $debug = true }
  opts.on("-s", "--socket SOCKET", "Socket") { |v| socket = v }
  opts.on("-p", "--port PORT", "Port") { |v| port = v }
  opts.on("-h", "--host HOST", "Host") { |v| host = v }
  opts.on("-g", "--group GROUPNAME", "Socket owning group") { |v|
    options[:gid] = nil; options[:group_name] = v }
end.parse!


unless options[:gid]
  if (group_name = options.delete(:group_name))
    options[:gid] = Etc.getgrnam(group_name).gid
  end
end

if host or port
  host ||= Simultaneous::DEFAULT_HOST
  port ||= Simultaneous::DEFAULT_PORT
  connection = Simultaneous::Connection.tcp(host, port)
else
  connection = (socket ||= Simultaneous::DEFAULT_CONNECTION)
  raise Errno::EADDRINUSE if File.exists?(socket) and File.socket?(socket)
end

terminate = proc {
  puts "Terminating..."
  EM.stop
}

%w(TERM INT QUIT).each { |signal| trap(signal, terminate) }

puts "Simultaneous server PID:#{$$} listening on #{connection}"

EventMachine.run {
  Simultaneous::Server.start(connection, options)
}
